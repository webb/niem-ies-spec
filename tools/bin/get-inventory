#!/usr/bin/env bash

#HELP:COMMAND_NAME: create an XML-formatted inventory of files and folders in a target directory
#HELP:Options:

. "$HOME"/share/wrtools-core/fail.bash
. "$HOME"/share/wrtools-core/opt_help.bash
. "$HOME"/share/wrtools-core/opt_verbose.bash
. "$HOME"/share/wrtools-core/temp.bash

bin_dir=$(cd "$(dirname "$0")" && pwd)
share_dir=${bin_dir}/../share/niem-ies-spec
get_conformance_target_uris_xsl=${share_dir}/get-conformance-target-uris.xsl
inventory_xsd=${share_dir}/inventory.xsd

#HELP:  --target=$dir | -t $dir: Run inventory on target directory
unset target
opt_target () {
    (( $# == 1 )) || fail_assert "need 1 parameter (got $#)"
    target="$1"
}

#HELP:  --output=$file | -o $file: Send input to file
unset output
opt_output () {
    (( $# == 1 )) || fail_assert "need 1 parameter (got $#)"
    output="$1"
}

#HELP:  --verbose, -v: Print additional diagnostics
#HELP:  --help | -h: Print this help
#HELP:  --keep-temps | -k: Don't delete temporary files

OPTIND=1
while getopts :hko:t:v-: option
do case "$option" in
       h ) opt_help;;
       k ) opt_keep_temps;;
       o ) opt_output "$OPTARG";;
       t ) opt_target "$OPTARG";;
       v ) opt_verbose;;
       - ) case "$OPTARG" in
               help ) opt_help;;
               help=* ) fail_arg_unexpected "$OPTARG";;
               keep-temps ) opt_keep_temp;;
               keep-temps=* ) fail_arg_unexpected "$OPTARG";;
               output ) fail_arg_missing "$OPTARG";;
               output=* ) opt_output "${OPTARG#*=}";;
               target ) fail_arg_missing "$OPTARG";;
               target=* ) opt_target "${OPTARG#*=}";;
               verbose ) opt_verbose;;
               verbose=* ) fail_arg_unexpected "$OPTARG";;
               * ) fail_option_unknown "$OPTARG";;
            esac;;
        '?' ) fail_option_unknown "$OPTARG";;
        : ) fail_arg_missing "$OPTARG";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

if [[ ${output+is-set} = is-set ]]
then exec 1>"$output"
fi

[[ ${target+is-set} = is-set ]] || fail_option_missing --target

# filenames MUST be represented as element content, since they may contain white space
# (including newlines), and we can't have that white space we collapsed into
# single spaces

encode_as_xml () {
    read -d '' -r result < <(sed --null-data -e 's/&/&amp;/g' -e 's/"/&quot;/g' -e "s/'/&amp;/g" -e 's/</&lt;/g')
    printf "%s" "$result"
}

get_directory () (
    (( $# == 1 )) || fail_assert need directory local name
    printf "%s<directory>\n" "$indent"
    printf '%s  <path>' "$indent"
    encode_as_xml <<< "$1"
    printf '</path>\n'

    get_contents=true
    if is_inside_git_dir=$(git -C "$1" rev-parse --is-inside-git-dir 2>/dev/null)
    then if [[ $is_inside_git_dir = true ]]
         then printf '%s  <contents-omitted reason="directory is inside git dir"/>\n' "$indent"
              get_contents=false
         fi
    fi

    if [[ $get_contents = true ]]
    then ( cd "$1" || fail_assert failed to cd to "\"$1\"" from "\"$PWD\""
           indent="$indent  "
           get_directory_contents )
    fi

    printf '%s</directory>\n' "$indent"
)

get_file () {
    (( $# == 1 )) || fail_assert need file local name
    printf "%s<file>\n" "$indent"
    printf '%s  <path>' "$indent"
    encode_as_xml <<< "$1"
    printf '</path>\n'
    mime_type=$(vrun file -r --brief --mime-type "$1")
    printf '%s  <mime-type>%s</mime-type>\n' "$indent" "$mime_type"
    printf '%s  <mime-encoding>%s</mime-encoding>\n' "$indent" "$(vrun file -r --brief --mime-encoding "$1")"
    if [[ $mime_type = text/xml ]]
    then
      if xmllint --noout "$1" > /dev/null 2>&1
      then
        printf '%s  <xml-well-formed>true</xml-well-formed>\n' "$indent"
        namespace=$(vrun xmllint --xpath 'namespace-uri(/*)' "$1")
        local_name=$(vrun xmllint --xpath 'local-name(/*)' "$1")
        printf '%s  <xml-document-element\n' "$indent"
        printf '%s    namespace="%s"\n' "$indent" "$namespace"
        printf '%s    local-name="%s"/>\n' "$indent" "$local_name"
        if [[ $namespace = "http://www.w3.org/2001/XMLSchema" && $local_name = "schema" ]]
        then
          target_namespace=$(vrun xmllint --xpath 'string(/*/@targetNamespace)' "$1")
          printf '%s  <xml-schema-target-namespace>%s</xml-schema-target-namespace>\n' "$indent" "$target_namespace"
        fi
        vrun xsltproc --novalid --nodtdattr --nonet --nowrite "$get_conformance_target_uris_xsl" "$1" | sed -e "s/^/${indent}  <conformance-target>/" -e "s/\$/<\/conformance-target>/"
      else
          printf '%s  <xml-well-formed>false</xml-well-formed>\n' "$indent"
      fi
    fi
    printf "%s</file>\n" "$indent"
}

get_directory_contents () {
    while read -d '' -r name_with_path
    do
        name=${name_with_path#./}
        if [[ -d $name ]]
        then get_directory "$name"
        elif [[ -f $name ]]
        then get_file "$name"
        else fail_assert unknown file type for "$PWD/$name"
        fi
    done < <(find . -mindepth 1 -maxdepth 1 -print0)
}

# start doing stuff

cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<inventory xmlns="http://example.org/inventory">
  <path>$target</path>
EOF

indent="  "

(cd "$target" && get_directory_contents)

cat <<EOF
</inventory>
EOF

if [[ ${output+is-set} = is-set ]]
then
  temp_make_file VALIDATE_RESULTS
  if ! vrun xmllint --noout --schema "$inventory_xsd" "$output" > "$VALIDATE_RESULTS" 2>&1
  then cat "$VALIDATE_RESULTS" >&2
       fail Resulting inventory file fails to validate to schema
  fi
fi

